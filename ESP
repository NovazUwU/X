local ESP = {}
local Update = {}

local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

function ESP:Draw()
    local Drawing = Drawing.new("Text")
    Drawing.Visible = false 
    Drawing.Size = 18
    Drawing.Outline = true 
    Drawing.Center = true 
    Drawing.Position = Vector2.new() 
    Drawing.OutlineColor = Color3.fromRGB(1, 1, 1)
    return Drawing 
end 

function ESP:Add(Player, Table)
    Update[Player] = {
        ["Drawing"] = self:Draw(),
        ["Color"] = Color3.fromRGB(255, 0, 0),
        ["Text"] = "No",
        ["Visible"] = true
    }
    self:Set(Player, Table)
end 

function ESP:Set(Player, Table)
    local Data = Update[Player] 
    if Data and Table then 
        for i,v in next, Table do Data[i] = v end
    end 
end 

function ESP:Remove(Player)
    local Table = Update[Player]
    local Drawing = Table and Table["Drawing"]
    if Drawing then 
        Update[Player] = nil 
        Drawing:Remove() 
    end 
end 

RunService.RenderStepped:Connect(function()
    for Player, Data in next, Update do 
        task.spawn(pcall, function()
            local Character = Player and Player.Character
            if Data and Character then 
                local Begin, Drawing, Text, Color, HumanoidRootPart = Data["Visible"], Data["Drawing"], Data["Text"], Data["Color"], Character:FindFirstChild("HumanoidRootPart")
                if Drawing and Text and HumanoidRootPart and Begin then 
                    local Position, Visible = Workspace["CurrentCamera"]:WorldToViewportPoint(HumanoidRootPart.Position)
                    if Visible then 
                        Drawing.Visible = true 
                        Drawing.Text = Text
                        Drawing.Color = Color
                        Drawing.Position = Vector2.new(Position.X, Position.Y)
                    else 
                        Drawing.Visible = false 
                    end 
                elseif Drawing then 
                    Drawing.Visible = false 
                end 
            end  
        end)
    end 
end)

return ESP
