local Things = {}
local Tabs = {}
local Library = {}
local Connections = {}
local Selected
local Colors = {
    Color3.fromRGB(255, 0, 0), 
    Color3.fromRGB(255, 136, 0),
    Color3.fromRGB(255, 255, 0),
    Color3.fromRGB(160, 255, 0),
    Color3.fromRGB(0, 255, 0),
    Color3.fromRGB(0, 255, 195),
    Color3.fromRGB(0, 213, 255),
    Color3.fromRGB(0, 145, 255),
    Color3.fromRGB(0, 60, 255),
    Color3.fromRGB(102, 0, 255),
    Color3.fromRGB(162, 0, 255),
    Color3.fromRGB(221, 0, 255),
    Color3.fromRGB(255, 0, 128),
    Color3.fromRGB(255, 255, 255),
    Color3.fromRGB(165, 165, 165),
    Color3.fromRGB(107, 107, 107),
    Color3.fromRGB(61, 61, 61),
    Color3.fromRGB(0, 0, 0)
}
local Abbreviations = {"s", "ms", "us", "ns"}
local StartOS = os.clock()
Library.__index = Library

function Abbreviate(Number)
    local Index = math.abs(math.floor(math.log(Number, 1000)))
	if Abbreviations[Index] then
	    local RoundedString = tostring(Number / (1000 ^ Index))
		local Return = (string.split(RoundedString, ".")[1] or RoundedString)..Abbreviations[Index]
		return Return  
	else
		return Number
	end
end

local function GetTextBounds(Drawing)
    local Text = Drawing.Text
    local Size = Drawing.Size
    if Text:sub(1, 1) == ">" then 
        Text = Text:sub(2)
    end 
    local Bounds = game:GetService("TextService"):GetTextSize(Text, Size, "Code", Vector2.new(Size * #Text, Size))
    return Bounds
end

local Watermark = Drawing.new("Text")
Watermark.Text = "Novaz#0001" 
Watermark.Visible = true 
Watermark.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X - 40, workspace.CurrentCamera.ViewportSize.Y - 50) 
Watermark.Size = 20 
Watermark.Transparency = 1 
Watermark.Color = Color3.fromRGB(255, 255, 255)
Watermark.Outline = true 
Watermark.OutlineColor = Color3.fromRGB(1, 1, 1)
Watermark.Center = true

function Library.new()
    return setmetatable({}, Library)
end 

function Library:CreateTab(Data)
    local Return = {}
    local Data = Data or {} 
    local Children = {} 
    local Tab = Drawing.new("Text")
    Tab.Text = Data["Name"] or "Tab"
    Tab.Visible = true 
    Tab.Position = Vector2.new(15, 300 + (#Things * 20)) 
    Tab.Size = Data["Size"] or 20  
    Tab.Transparency = Data["Transparency"] or 1  
    Tab.Color = Data["Color"] or Color3.fromRGB(255, 255, 255)
    Tab.Outline = Data["Outline"] or true 
    Tab.OutlineColor = Data["OutlineColor"] or Color3.fromRGB(1, 1, 1)
    table.insert(Things, {Tab, true, function() for i,v in pairs(Things) do if v[4] and v[4] == Tab then v[2] = not v[2]end end end, "Tab"})
    function Return:AddButton(Data1)
        local Data1 = Data1 or {}
        local Button = Drawing.new("Text") 
        Button.Text = Data1["Name"] or Data1["Text"] or "Button"
        Button.Visible = true 
        Button.Position = Vector2.new(35, 300 + (#Things * 20)) 
        Button.Size = Data1["Size"] or 20  
        Button.Transparency = Data1["Transparency"] or 1  
        Button.Color = Data1["Color"] or Color3.fromRGB(255, 255, 255)
        Button.Outline = Data1["Outline"] or true 
        Button.OutlineColor = Data1["OutlineColor"] or Color3.fromRGB(1, 1, 1)
        table.insert(Things, {Button, true, (Data1["Callback"] or function() end), Tab})
        return Button 
    end 
    function Return:AddLabel(Data1)
        local Return1 = {} 
        local Data1 = Data1 or {}
        local Label = Drawing.new("Text")
        Label.Text = Data1["Name"] or Data1["Text"] or "Label"
        Label.Visible = true 
        Label.Position = Vector2.new(35, 300 + (#Things * 20)) 
        Label.Size = Data1["Size"] or 20 
        Label.Transparency = Data1["Transparency"] or 1 
        Label.Color = Data1["Color"] or Color3.fromRGB(255, 255, 255)
        Label.Outline = Data1["Outline"] or true 
        Label.OutlineColor = Data1["OutlineColor"] or Color3.fromRGB(1, 1, 1)
        table.insert(Things, {Label, true, function() end, Tab})
        function Return1:Set(String) 
            Label.Text = String
        end 
        return Return1 
    end
    function Return:AddToggle(Data1)
        local Data1 = Data1 or {} 
        local Toggle = Drawing.new("Text")
        Toggle.Text = (Data1["Name"] or Data1["Text"] or "Toggle")..": <off>"
        Toggle.Visible = true 
        Toggle.Position = Vector2.new(35, 300 + (#Things * 20)) 
        Toggle.Size = Data1["Size"] or 20 
        Toggle.Transparency = Data1["Transparency"] or 1 
        Toggle.Color = Data1["Color"] or Color3.fromRGB(255, 255, 255)
        Toggle.Outline = Data1["Outline"] or true 
        Toggle.OutlineColor = Data1["OutlineColor"] or Color3.fromRGB(1, 1, 1)
        table.insert(Things, {Toggle, true, (Data1["Callback"] or function() end), Tab, "Toggle", false})
    end 
    function Return:AddSlider(Data1)
        local Data1 = Data1 or {} 
        local Slider = Drawing.new("Text")
        Slider.Text = (Data1["Name"] or Data1["Text"] or "Slider")..": <"..(((Data1["Value"] <= Data1["Max"] and Data1["Value"]) or Data1["Max"]) and ((Data1["Value"] >= Data1["Min"] and Data1["Value"]) or Data1["Min"]) or 0)..">"
        Slider.Visible = true 
        Slider.Position = Vector2.new(35, 300 + (#Things * 20)) 
        Slider.Size = Data1["Size"] or 20 
        Slider.Transparency = Data1["Transparency"] or 1 
        Slider.Color = Data1["Color"] or Color3.fromRGB(255, 255, 255)
        Slider.Outline = Data1["Outline"] or true 
        Slider.OutlineColor = Data1["OutlineColor"] or Color3.fromRGB(1, 1, 1)
        table.insert(Things, {Slider, true, (Data1["Callback"] or function() end), Tab, "Slider", (Data1["Value"] or 0), (Data1["Precision"] or 1), (Data1["Min"] or 0), (Data1["Max"] or 0)})
        if Data1["Callback"] then 
            Data1["Callback"]((((Data1["Value"] <= Data1["Max"] and Data1["Value"]) or Data1["Max"]) and ((Data1["Value"] >= Data1["Min"] and Data1["Value"]) or Data1["Min"]) or 0)) 
        end 
    end 
    function Return:AddColorpicker(Data1)
        local Data1 = Data1 or {} 
        local Color = Drawing.new("Text")
        Color.Text = (Data1["Name"] or Data1["Text"] or "Colorpicker") 
        Color.Visible = true 
        Color.Position = Vector2.new(35, 300 + (#Things * 20))
        Color.Size = Data1["Size"] or 20 
        Color.Transparency = Data1["Transparency"] or 1 
        Color.Color = Data1["Value"] or Data1["Color"] or Colors[1] 
        Color.Outline = Data1["Outline"] or true 
        Color.OutlineColor = Data1["OutlineColor"] or Color3.fromRGB(1, 1, 1)
        table.insert(Things, {Color, true, (Data1["Callback"] or function() end), Tab, "Colorpicker", 1})
        Data1["Callback"](Colors[1])
    end 
    function Return:AddDropdownSlider(Data1)
        local Data1 = Data1 or {} 
        local Return1 = {}
        local DropdownSlider = Drawing.new("Text")
        DropdownSlider.Text = (Data1["Name"] or Data1["Text"] or "DropdownSlider")
        DropdownSlider.Visible = true 
        DropdownSlider.Position = Vector2.new(35, 300 + (#Things * 20))
        DropdownSlider.Size = Data1["Size"] or 20 
        DropdownSlider.Transparency = Data1["Transparency"] or 1 
        DropdownSlider.Color = Data1["Color"] or Color3.fromRGB(255, 255, 255) 
        DropdownSlider.Outline = Data1["Outline"] or true 
        DropdownSlider.OutlineColor = Data1["OutlineColor"] or Color3.fromRGB(1, 1, 1)
        if Data1["Sort"] then 
            if Data1["List"] then 
                table.sort(Data1["List"])
            end 
            if Data1["Table"] then 
                table.sort(Data1["Table"])
            end 
        end 
        table.insert(Things, {DropdownSlider, true, (Data1["Callback"] or function() end), Tab, "DropdownSlider", (Data1["List"] or Data1["Table"] or {}), Data1["Value"] or 1})
        function Return1:UpdateList(Table)
            for i,v in pairs(Things) do 
                if v[1] == DropdownSlider and v[6] then 
                    v[6] = Table or {}
                end 
            end 
        end 
    end 
    return Return  
end 

local Box = Drawing.new("Square")
Box.Filled = true 
Box.Transparency = 0.5 
Box.Visible = true 
Box.Position = Vector2.new(10, 300)
local Amount = 0 
local Amount1 = 0 
for i,v in pairs(Things) do 
    if v[2] then 
        if GetTextBounds(v[1]).X > Amount then 
            Amount = GetTextBounds(v[1]).X
	end 
	Amount1 = Amount1 + GetTextBounds(v[1]).Y
    end
end 
Box.Size = Vector2.new(Amount, Amount1 + 5)
Box.Color = Color3.fromRGB(0, 0, 0)
Box.Thickness = 2

Connections.Connection1 = game:GetService("RunService").RenderStepped:Connect(function()
    local CurrentIndex = 0 
    for i,v in ipairs(Things) do
        pcall(function()
            if v and v[2] then 
                v[1].Visible = true 
                v[1].Position = Vector2.new(v[1].Position.X, 300 + (CurrentIndex * 20))
                CurrentIndex = CurrentIndex + 1
            else 
                v[1].Visible = false 
            end 
        end)
    end 
    Box.Position = Vector2.new(10, 300)
    local Amount = 0 
    local Amount1 = 0 
    for i,v in pairs(Things) do 
    	if v[2] then 
            if GetTextBounds(v[1]).X > Amount then 
		Amount = GetTextBounds(v[1]).X
	    end 
	    Amount1 = Amount1 + GetTextBounds(v[1]).Y
	end
    end 
    Box.Size = Vector2.new(Amount, Amount1 + 5)
end)

Connections.Connection2 = game:GetService("UserInputService").InputBegan:Connect(function(input, gpe)
    if gpe then return end 
    if input.KeyCode == Enum.KeyCode.Return then 
        if Selected and Selected[3] and not Selected[5] then
            Selected[3]()  
        end  
    end 
end)

function UIActive()
    return Box.Visible
end 

function Control(action, state, input, gpe)
    if gpe or state == Enum.UserInputState.End then return end 
    if input.KeyCode == Enum.KeyCode.Down then 
        if not Selected then 
            Selected = Things[1] 
            Selected[1].Text = ">"..Selected[1].Text 
            if Selected[5] and Selected[5] == "Colorpicker" then 
                Pass = false
            end 
            if Pass then 
                Selected[1].Color = Color3.fromRGB(140, 140, 140)
            end 
            return 
        end 
        for i,v in ipairs(Things) do 
            if v == Selected then
                local OldText = Selected[1].Text:sub(2)
                Selected[1].Text = OldText
                local Pass = true 
                if Selected[5] and Selected[5] == "Colorpicker" then 
                    Pass = false
                end 
                if Pass then 
                    Selected[1].Color = Color3.fromRGB(255, 255, 255)
                end 
                local Indexes = {}
                for i1,v1 in ipairs(Things) do 
                    if i1 > i and v1[2] then
                        table.insert(Indexes, i1)
                    end 
                end 
                local Index
                if Indexes[1] then 
                    Index = math.min(table.unpack(Indexes))
                end 
                if Index and Things[Index] then
                    Selected = Things[Index] 
                    Selected[1].Text = ">"..Selected[1].Text
                    local Pass = true 
                    if Selected[5] and Selected[5] == "Colorpicker" then 
                        Pass = false
                    end 
                    if Pass then 
                        Selected[1].Color = Color3.fromRGB(140, 140, 140)
                    end 
                else 
                    Selected = Things[1]
                    Selected[1].Text = ">"..Selected[1].Text 
                    local Pass = true 
                    if Selected[5] and Selected[5] == "Colorpicker" then 
                        Pass = false
                    end 
                    if Pass then 
                        Selected[1].Color = Color3.fromRGB(140, 140, 140)
                    end 
                end 
                return 
            end 
        end 
    elseif input.KeyCode == Enum.KeyCode.Up then 
        if not Selected then 
            Selected = Things[#Things] 
            Selected[1].Text = ">"..Selected[1].Text 
            local Pass = true 
            if Selected[5] and Selected[5] == "Colorpicker" then 
                Pass = false
            end 
            if Pass then 
                Selected[1].Color = Color3.fromRGB(140, 140, 140)
            end 
            return 
        end 
        for i,v in ipairs(Things) do 
            if v == Selected then
                local OldText = Selected[1].Text:sub(2)
                Selected[1].Text = OldText
                local Pass = true 
                if Selected[5] and Selected[5] == "Colorpicker" then 
                    Pass = false
                end 
                if Pass then 
                    Selected[1].Color = Color3.fromRGB(255, 255, 255)
                end 
                local Indexes = {}
                for i1,v1 in ipairs(Things) do 
                    if i1 < i and v1[2] then
                        table.insert(Indexes, i1)
                    end 
                end 
                local Index
                if Indexes[1] then 
                    Index = math.max(table.unpack(Indexes))
                end 
                if Index and Things[Index] then
                    Selected = Things[Index] 
                    Selected[1].Text = ">"..Selected[1].Text
                    local Pass = true 
                    if Selected[5] and Selected[5] == "Colorpicker" then 
                        Pass = false
                    end 
                    if Pass then 
                        Selected[1].Color = Color3.fromRGB(140, 140, 140)
                    end 
                else 
                    local HighestIndex = 1 
                    for i1,v1 in pairs(Things) do 
                        if v1[2] and i1 > HighestIndex then 
                            HighestIndex = i1 
                        end 
                    end 
                    Selected = Things[HighestIndex]
                    Selected[1].Text = ">"..Selected[1].Text 
                    local Pass = true 
                    if Selected[5] and Selected[5] == "Colorpicker" then 
                        Pass = false
                    end 
                    if Pass then 
                        Selected[1].Color = Color3.fromRGB(140, 140, 140)
                    end 
                end 
                return 
            end 
        end 
    elseif input.KeyCode == Enum.KeyCode.Right then 
        if Selected and Selected[5] and Selected[5] == "Slider" and Selected[6] and Selected[7] and Selected[8] and Selected[9] then
            if Selected[6] + (Selected[7] / 10) >= Selected[9] then 
                Selected[6] = Selected[9] 
                Selected[1].Text = (string.split(Selected[1].Text, ":")[1]..": <"..(Selected[6])..">")
                Selected[3](Selected[6])
            else 
                Selected[6] = Selected[6] + (Selected[7] / 10)
                Selected[1].Text = (string.split(Selected[1].Text, ":")[1]..": <"..(math.floor(Selected[6] * 10) / 10)..">")
                Selected[3](Selected[6])
            end  
        elseif Selected and Selected[5] and Selected[5] == "Toggle" and Selected[6] ~= nil then
            Selected[6] = not Selected[6] 
            Selected[1].Text = (string.split(Selected[1].Text, ":")[1])..": "..((Selected[6] and "<on>") or "<off>")
            Selected[3](Selected[6]) 
        elseif Selected and Selected[5] and Selected[5] == "Colorpicker" and Selected[6] then 
            if Selected[6] + 1 > #Colors then
                Selected[6] = 1 
                Selected[3](Colors[1])
                Selected[1].Color = Colors[1]
            else 
                Selected[6] = Selected[6] + 1 
                Selected[3](Colors[Selected[6]])
                Selected[1].Color = Colors[Selected[6]]
            end 
        elseif Selected and Selected[1] and Selected[5] and Selected[5] == "DropdownSlider" and Selected[6] and Selected[7] then 
            if Selected[6][Selected[7] + 1] then 
                Selected[7] = Selected[7] + 1 
                local Origin = string.split(Selected[1].Text, ":")[1]
                Selected[1].Text = Origin..": "..Selected[6][Selected[7]]
                Selected[3](Selected[6][Selected[7]])  
            else  
                Selected[7] = 1 
                local NewText = ""
                local Origin = string.split(Selected[1].Text, ":")[1]
                Selected[1].Text = Origin..": "..Selected[6][Selected[7]]
                Selected[3](Selected[6][Selected[7]])   
            end
        end 
    elseif input.KeyCode == Enum.KeyCode.Left then 
        if Selected and Selected[5] and Selected[5] == "Slider" and Selected[6] and Selected[7] and Selected[8] and Selected[9] then 
            if Selected[6] - (Selected[7] / 10) <= Selected[8] then 
                Selected[6] = Selected[8] 
                Selected[1].Text = (string.split(Selected[1].Text, ":")[1]..": <"..(math.floor(Selected[6] * 10) / 10)..">")
                Selected[3](Selected[6])
            else 
                Selected[6] = Selected[6] - (Selected[7] / 10)
                Selected[1].Text = (string.split(Selected[1].Text, ":")[1]..": <"..(math.floor(Selected[6] * 10) / 10)..">")
                Selected[3](Selected[6])
            end  
        elseif Selected and Selected[5] and Selected[5] == "Toggle" and Selected[6] ~= nil then
            Selected[6] = not Selected[6] 
            Selected[1].Text = (string.split(Selected[1].Text, ":")[1])..": "..((Selected[6] and "<on>") or "<off>")
            Selected[3](Selected[6])
        elseif Selected and Selected[5] and Selected[5] == "Colorpicker" and Selected[6] then 
            if Selected[6] - 1 < 1 then
                Selected[6] = #Colors  
                Selected[3](Colors[#Colors])
                Selected[1].Color = Colors[#Colors]
            else 
                Selected[6] = Selected[6] - 1 
                Selected[3](Colors[Selected[6]]) 
                Selected[1].Color = Colors[Selected[6]]
            end  
        elseif Selected and Selected[1] and Selected[5] and Selected[5] == "DropdownSlider" and Selected[6] and Selected[7] then 
            if Selected[6][Selected[7] - 1] then 
                Selected[7] = Selected[7] - 1 
                local Origin = string.split(Selected[1].Text, ":")[1]
                Selected[1].Text = Origin..": "..Selected[6][Selected[7]]
                Selected[3](Selected[6][Selected[7]])  
            else  
                Selected[7] = #Selected[6] 
                local NewText = ""
                local Origin = string.split(Selected[1].Text, ":")[1]
                Selected[1].Text = Origin..": "..Selected[6][Selected[7]]
                Selected[3](Selected[6][Selected[7]])   
            end
        end 
    end 
end

local ContextActionService = game:GetService("ContextActionService")

local function UserInputServiceReplica(...)
	Control(...)
	return Enum.ContextActionResult.Sink
end

ContextActionService:BindActionAtPriority("ArrowKeyDisable", UserInputServiceReplica, false, Enum.ContextActionPriority.High.Value, Enum.KeyCode.Up, Enum.KeyCode.Down, Enum.KeyCode.Left, Enum.KeyCode.Right)

task.spawn(function()
    local Credits = "Loader Hardcoded By Novaz#0001\nLoaded In "..(Abbreviate(os.clock() - StartOS))
    local Credit = Drawing.new("Text")
    Credit.Text = ""
    Credit.Color = Color3.fromRGB(255, 255, 255)
    Credit.Size = 25
    Credit.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
    Credit.Outline = true 
    Credit.OutlineColor = Color3.fromRGB(1, 1, 1) 
    Credit.Visible = true 
    Credit.Transparency = 1 
    Credit.Center = true 
    
    for i = 1, #Credits do 
        Credit.Text = Credit.Text..string.char(string.byte(Credits, i))  
        task.wait(.05)
    end
    
    task.wait(2)
    
    Credit:Remove()
end)

local Lib = Library.new()

local UI = Lib:CreateTab({
    Name = "Novaline"
})

UI:AddButton({
    Name = "Open Discord Invite",
    Callback = function()
        syn.request({
            Url = "http://127.0.0.1:6463/rpc?v=1",
            Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json",
                    ["origin"] = "https://discord.com",
                },
            Body = game:GetService("HttpService"):JSONEncode({
                ["args"] = {
                    ["code"] = "K2YaGqa7fR",
                },
                ["cmd"] = "INVITE_BROWSER",
                ["nonce"] = "."
            })
        })
    end 
})

UI:AddButton({
    Name = "Destroy UI",
    Callback = function()
        for i,v in ipairs(Things) do 
            task.spawn(function()
                pcall(function()
                    v[1]:Remove()
                end)
            end)
        end 
        for i,v in pairs(Connections) do 
            task.spawn(function()
                v:Disconnect()
            end)
        end 
        Box.Visible = false
	Watermark:Remove()
    end 
})

return Lib
